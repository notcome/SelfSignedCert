// SelfSignedCert
//
// Copyright © 2022 Minsheng Liu. All rights reserved.
// Copyright © 2016 Stefan van den Oord. All rights reserved.

import XCTest
@testable import SelfSignedCert

final class DERTests: XCTestCase {
    func testEncodeNull() {
        XCTAssertEqual(NSNull().toDER(), [0x05, 0x00])
    }

    func testEncodeBooleans() {
        XCTAssertEqual(true.toDER(), [0x01,0x01,0xFF])
        XCTAssertEqual(false.toDER(), [0x01,0x01,0x00])
    }

    func testEncodeIntegers() {
        XCTAssertEqual(0.toDER(), [0x02,0x01,0x00])
        XCTAssertEqual(1.toDER(), [0x02,0x01,0x01])
        XCTAssertEqual((-1).toDER(), [0x02,0x01,0xFF])
        XCTAssertEqual(72.toDER(), [0x02,0x01,0x48])
        XCTAssertEqual((-128).toDER(), [0x02,0x01,0x80])
        XCTAssertEqual(128.toDER(), [0x02,0x02,0x00,0x80])
        XCTAssertEqual(255.toDER(), [0x02,0x02,0x00,0xFF])
        XCTAssertEqual((-256).toDER(), [0x02,0x02,0xFF,0x00])
        XCTAssertEqual(12345.toDER(), [0x02,0x02,0x30,0x39])
        XCTAssertEqual((-12345).toDER(), [0x02,0x02,0xCF,0xC7])
        XCTAssertEqual(123456789.toDER(), [0x02,0x04,0x07,0x5B,0xCD,0x15])
        XCTAssertEqual((-123456789).toDER(), [0x02,0x04,0xF8,0xA4,0x32,0xEB])
    }

    func testEncodStrings() {
        XCTAssertEqual("".toDER(), [0x13, 0x00])
        XCTAssertEqual("hello".toDER(), [0x13, 0x05, 0x68, 0x65, 0x6c, 0x6c, 0x6f])
        XCTAssertEqual("thérè".toDER(), [0x0c, 0x07, 0x74, 0x68, 0xc3, 0xa9, 0x72, 0xc3, 0xa8])
    }

    func testEncodeLongString() {
        let string = "Lorém ipsum dolor sit amet, consectetur adipiscing elit. Aliquam in felis a libero pharetra pellentesque. Mauris et dui vel velit vulputate iaculis eget non orci. Pellentesque magna mauris, finibus et dolor eget, convallis placerat est. Suspendisse ac finibus diam, sed iaculis nulla. Aliquam eu gravida magna. Maecenas aliquam arcu ut odio convallis laoreet. Pellentesque augue dui, feugiat nec felis pharetra, lacinia vulputate risus. Quisque at orci libero. Vestibulum blandit ipsum vel libero elementum, vestibulum interdum nibh tincidunt. Cras eu elementum urna. Integer quis magna sed quam aliquam suscipit."
        let bytes: [UInt8] = [0x0c, 0x82, 0x02, 0x66, 0x4c, 0x6f, 0x72, 0xc3, 0xa9, 0x6d, 0x20, 0x69, 0x70, 0x73, 0x75, 0x6d, 0x20, 0x64, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x73, 0x69, 0x74, 0x20, 0x61, 0x6d, 0x65, 0x74, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x74, 0x65, 0x74, 0x75, 0x72, 0x20, 0x61, 0x64, 0x69, 0x70, 0x69, 0x73, 0x63, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x6c, 0x69, 0x74, 0x2e, 0x20, 0x41, 0x6c, 0x69, 0x71, 0x75, 0x61, 0x6d, 0x20, 0x69, 0x6e, 0x20, 0x66, 0x65, 0x6c, 0x69, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x62, 0x65, 0x72, 0x6f, 0x20, 0x70, 0x68, 0x61, 0x72, 0x65, 0x74, 0x72, 0x61, 0x20, 0x70, 0x65, 0x6c, 0x6c, 0x65, 0x6e, 0x74, 0x65, 0x73, 0x71, 0x75, 0x65, 0x2e, 0x20, 0x4d, 0x61, 0x75, 0x72, 0x69, 0x73, 0x20, 0x65, 0x74, 0x20, 0x64, 0x75, 0x69, 0x20, 0x76, 0x65, 0x6c, 0x20, 0x76, 0x65, 0x6c, 0x69, 0x74, 0x20, 0x76, 0x75, 0x6c, 0x70, 0x75, 0x74, 0x61, 0x74, 0x65, 0x20, 0x69, 0x61, 0x63, 0x75, 0x6c, 0x69, 0x73, 0x20, 0x65, 0x67, 0x65, 0x74, 0x20, 0x6e, 0x6f, 0x6e, 0x20, 0x6f, 0x72, 0x63, 0x69, 0x2e, 0x20, 0x50, 0x65, 0x6c, 0x6c, 0x65, 0x6e, 0x74, 0x65, 0x73, 0x71, 0x75, 0x65, 0x20, 0x6d, 0x61, 0x67, 0x6e, 0x61, 0x20, 0x6d, 0x61, 0x75, 0x72, 0x69, 0x73, 0x2c, 0x20, 0x66, 0x69, 0x6e, 0x69, 0x62, 0x75, 0x73, 0x20, 0x65, 0x74, 0x20, 0x64, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x65, 0x67, 0x65, 0x74, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x76, 0x61, 0x6c, 0x6c, 0x69, 0x73, 0x20, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x61, 0x74, 0x20, 0x65, 0x73, 0x74, 0x2e, 0x20, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x73, 0x73, 0x65, 0x20, 0x61, 0x63, 0x20, 0x66, 0x69, 0x6e, 0x69, 0x62, 0x75, 0x73, 0x20, 0x64, 0x69, 0x61, 0x6d, 0x2c, 0x20, 0x73, 0x65, 0x64, 0x20, 0x69, 0x61, 0x63, 0x75, 0x6c, 0x69, 0x73, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x2e, 0x20, 0x41, 0x6c, 0x69, 0x71, 0x75, 0x61, 0x6d, 0x20, 0x65, 0x75, 0x20, 0x67, 0x72, 0x61, 0x76, 0x69, 0x64, 0x61, 0x20, 0x6d, 0x61, 0x67, 0x6e, 0x61, 0x2e, 0x20, 0x4d, 0x61, 0x65, 0x63, 0x65, 0x6e, 0x61, 0x73, 0x20, 0x61, 0x6c, 0x69, 0x71, 0x75, 0x61, 0x6d, 0x20, 0x61, 0x72, 0x63, 0x75, 0x20, 0x75, 0x74, 0x20, 0x6f, 0x64, 0x69, 0x6f, 0x20, 0x63, 0x6f, 0x6e, 0x76, 0x61, 0x6c, 0x6c, 0x69, 0x73, 0x20, 0x6c, 0x61, 0x6f, 0x72, 0x65, 0x65, 0x74, 0x2e, 0x20, 0x50, 0x65, 0x6c, 0x6c, 0x65, 0x6e, 0x74, 0x65, 0x73, 0x71, 0x75, 0x65, 0x20, 0x61, 0x75, 0x67, 0x75, 0x65, 0x20, 0x64, 0x75, 0x69, 0x2c, 0x20, 0x66, 0x65, 0x75, 0x67, 0x69, 0x61, 0x74, 0x20, 0x6e, 0x65, 0x63, 0x20, 0x66, 0x65, 0x6c, 0x69, 0x73, 0x20, 0x70, 0x68, 0x61, 0x72, 0x65, 0x74, 0x72, 0x61, 0x2c, 0x20, 0x6c, 0x61, 0x63, 0x69, 0x6e, 0x69, 0x61, 0x20, 0x76, 0x75, 0x6c, 0x70, 0x75, 0x74, 0x61, 0x74, 0x65, 0x20, 0x72, 0x69, 0x73, 0x75, 0x73, 0x2e, 0x20, 0x51, 0x75, 0x69, 0x73, 0x71, 0x75, 0x65, 0x20, 0x61, 0x74, 0x20, 0x6f, 0x72, 0x63, 0x69, 0x20, 0x6c, 0x69, 0x62, 0x65, 0x72, 0x6f, 0x2e, 0x20, 0x56, 0x65, 0x73, 0x74, 0x69, 0x62, 0x75, 0x6c, 0x75, 0x6d, 0x20, 0x62, 0x6c, 0x61, 0x6e, 0x64, 0x69, 0x74, 0x20, 0x69, 0x70, 0x73, 0x75, 0x6d, 0x20, 0x76, 0x65, 0x6c, 0x20, 0x6c, 0x69, 0x62, 0x65, 0x72, 0x6f, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x75, 0x6d, 0x2c, 0x20, 0x76, 0x65, 0x73, 0x74, 0x69, 0x62, 0x75, 0x6c, 0x75, 0x6d, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x64, 0x75, 0x6d, 0x20, 0x6e, 0x69, 0x62, 0x68, 0x20, 0x74, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x75, 0x6e, 0x74, 0x2e, 0x20, 0x43, 0x72, 0x61, 0x73, 0x20, 0x65, 0x75, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x75, 0x6d, 0x20, 0x75, 0x72, 0x6e, 0x61, 0x2e, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20, 0x71, 0x75, 0x69, 0x73, 0x20, 0x6d, 0x61, 0x67, 0x6e, 0x61, 0x20, 0x73, 0x65, 0x64, 0x20, 0x71, 0x75, 0x61, 0x6d, 0x20, 0x61, 0x6c, 0x69, 0x71, 0x75, 0x61, 0x6d, 0x20, 0x73, 0x75, 0x73, 0x63, 0x69, 0x70, 0x69, 0x74, 0x2e]

        XCTAssertEqual(string.toDER(), bytes)
    }

    func testEncodeBitString() {
        let str = "test"
        let data = str.data(using: .utf8)!
        let bitString = BitString(data: data)
        XCTAssertEqual(bitString.toDER(), [0x03, 0x05, 0x00, 0x74, 0x65, 0x73, 0x74])
    }


    func testEncodeDates() {
        let date = Date(timeIntervalSinceReferenceDate: 265336576)
        let expected = [0x18, 0x0F] + [UInt8]("20090530003616Z".utf8)
        XCTAssertEqual(date.toDER(), expected)
    }

    func testEncodeOIDs() {
        XCTAssertEqual(([] as OID).toDER(), [0x06, 0x00])
        // The following involves merging the first two entries to form the first subidentifier.
        XCTAssertEqual(([0, 2] as OID).toDER(), [0x06, 0x01, 0x02])
        XCTAssertEqual(([1, 2] as OID).toDER(), [0x06, 0x01, 0x2a])
        XCTAssertEqual(([2, 3] as OID).toDER(), [0x06, 0x01, 0x53])

        XCTAssertEqual(
            ([1, 2, 840, 113549, 1, 1, 1] as OID).toDER(),
            [0x06, 0x09, 0x2a, 0x86, 0x48, 0x86,  0xf7, 0x0d, 0x01, 0x01, 0x01]
        )

        XCTAssertEqual(
            ([1, 2, 840, 113549, 1, 1, 1] as OID).toDER(),
            [0x06, 0x09, 0x2a, 0x86, 0x48, 0x86,  0xf7, 0x0d, 0x01, 0x01, 0x01]
        )

        XCTAssertEqual(
            ([2, 5, 4, 4] as OID).toDER(),
            [0x06, 0x03, 0x55, 0x04, 0x04]
        )

        XCTAssertEqual(
            ([1, 2, 840, 113549, 1, 9, 1] as OID).toDER(),
            [0x06, 0x09, 0x2a,0x86,0x48,0x86,0xf7,0x0d,0x01,0x09,0x01]
        )
    }
}
